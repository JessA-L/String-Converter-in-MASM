Microsoft (R) Macro Assembler Version 14.29.30142.1	    06/04/22 21:03:56
<Project 6: Low-Level I/O Procedures & Macros     (Proj6_ALL  Page 1 - 1


				TITLE Project 6: Low-Level I/O Procedures & Macros     (Proj6_ALLMANLJ.asm)

				; Author: Jessica-Allman-LaPorte
				; Last Modified: 6/3/2022
				; OSU email address: allmanlj@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                Due Date: 6/5/2022
				; Description: Program includes proceedures that user input as a string of ascii characters and converts
				;				the string to numeric form and then converts back to print the ASCII representation of 
				;				the value to the output. Includes a test program within main that fills an array of 
				;				user defined integers, display the integers, their sum, and their truncated average. 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Display a prompt (input parameter, by reference), then get the user’s keyboard 
				;	input using ReadString, in the form of a string of digits, into a memory location. 
				;
				; Preconditions: do not use eax, ecx, esi as arguments
				;
				; Receives:
				; prompt = address of prompt string
				; string_len = size of input_string
				; input_string = array of ascii characters input by user
				; - string_size:REQ
				;
				; returns: stringAddr = generated string address
				; ---------------------------------------------------------------------------------
				mGetString MACRO prompt:REQ, string_len:REQ, input_string:REQ, string_size:REQ
				; prompt user for input
					PUSH	EDX
					MOV		EDX, prompt
					CALL	WriteString

				; get user input
					MOV		EDX, input_string			; EDX = address of num_string (buffer)
					MOV		ECX, string_size			; ECX = num_string (buffer) size
					CALL	ReadString					; returns:
														;	EDX = address of num_string (user string)					
					MOV		string_len, EAX				;	EAX = number of characters entered

					POP		EDX
				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Print the string stored in a specified memory location using WriteString.
				;
				; Preconditions: 
				;
				; Receives:
				;	string array
				;
				; returns: none
				; ---------------------------------------------------------------------------------
				mDisplayString MACRO array:REQ

					CMP		sign, 0
					JZ		_write
					MOV		AL, 45
					CALL	WriteChar
				_write:
					MOV		EDX, array
					CALL	WriteString

				ENDM

 = 00000004			ARRAYSIZE = 4							; TEST: change back to 10

 00000000			.data

 00000000 50 72 6F 6A 65	intro1				BYTE	"Project 6: Fun with Low-Level I/O Procedures & Macros! - by Jessica Allman-LaPorte",13,10,13,10,0
	   63 74 20 36 3A
	   20 46 75 6E 20
	   77 69 74 68 20
	   4C 6F 77 2D 4C
	   65 76 65 6C 20
	   49 2F 4F 20 50
	   72 6F 63 65 64
	   75 72 65 73 20
	   26 20 4D 61 63
	   72 6F 73 21 20
	   2D 20 62 79 20
	   4A 65 73 73 69
	   63 61 20 41 6C
	   6C 6D 61 6E 2D
	   4C 61 50 6F 72
	   74 65 0D 0A 0D
	   0A 00
 00000057 49 6E 70 75 74	intro2				BYTE	"Input 10 signed decimal integers (positive or negative. or 0).",13,10
	   20 31 30 20 73
	   69 67 6E 65 64
	   20 64 65 63 69
	   6D 61 6C 20 69
	   6E 74 65 67 65
	   72 73 20 28 70
	   6F 73 69 74 69
	   76 65 20 6F 72
	   20 6E 65 67 61
	   74 69 76 65 2E
	   20 6F 72 20 30
	   29 2E 0D 0A
 00000097  45 61 63 68 20						BYTE	"Each number must fit inside a 32 bit register. After you've input the raw numbers,",13,10
	   6E 75 6D 62 65
	   72 20 6D 75 73
	   74 20 66 69 74
	   20 69 6E 73 69
	   64 65 20 61 20
	   33 32 20 62 69
	   74 20 72 65 67
	   69 73 74 65 72
	   2E 20 41 66 74
	   65 72 20 79 6F
	   75 27 76 65 20
	   69 6E 70 75 74
	   20 74 68 65 20
	   72 61 77 20 6E
	   75 6D 62 65 72
	   73 2C 0D 0A
 000000EB  74 68 65 20 70						BYTE	"the program will display a list of the integers, their sum, and their truncated mean.",13,10,0
	   72 6F 67 72 61
	   6D 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 20 6F 66 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   74 72 75 6E 63
	   61 74 65 64 20
	   6D 65 61 6E 2E
	   0D 0A 00
 00000143 50 6C 65 61 73	prompt1				BYTE	"Please enter a signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000162 45 52 52 4F 52	error_mess			BYTE	"ERROR: You did not enter a signed number or your number was too big.",13,10,0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0D 0A
	   00
 000001A9 59 6F 75 20 65	display_string		BYTE	"You entered the following numbers:",13,10,0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 0D
	   0A 00
 000001CE 54 68 65 20 73	sum_string			BYTE	"The sum of these numbers is: ",13,10,0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 0D
	   0A 00
 000001EE 54 68 65 20 74	average_string		BYTE	"The truncated average is: ",13,10,0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 0D 0A 00
 0000020B 47 6F 6F 64 62	goodbye_string		BYTE	"Goodbye!",13,10,0
	   79 65 21 0D 0A
	   00
 00000216  00000015 [		num_string			BYTE	21 DUP(0)
	    00
	   ]
 0000022B  00000004 [		digit_array			BYTE	ARRAYSIZE DUP(?)
	    00
	   ]
 0000022F  00000004 [		digit_array2		BYTE	ARRAYSIZE DUP(?)
	    00
	   ]
				; TODO: push to stack
 00000233  00000004 [		int_array			DWORD	ARRAYSIZE DUP(?)
	    00000000
	   ]


 00000000			.code
 00000000			main PROC

 00000000  68 00000000 R		PUSH	OFFSET intro1
 00000005  68 00000057 R		PUSH	OFFSET intro2
 0000000A  E8 00000047			CALL	introduction
					
				; Test program which uses the ReadVal and WriteVal procedures to:

 0000000F  B9 00000004			MOV		ECX, ARRAYSIZE			; _fillLoop will loop ARRAYSIZE times
 00000014  BF 00000233 R		MOV		EDI, OFFSET int_array	; Address of array in EDI

				; fill array with ARRAYSIZE (default 10) valid integers entered by users
 00000019			_fillLoop:
 00000019  6A 15			PUSH	SIZEOF num_string		; [EBP+20]
 0000001B  68 00000216 R		PUSH	OFFSET num_string		; [EBP+16]
 00000020  68 00000162 R		PUSH	OFFSET error_mess		; [EBP+12]
 00000025  68 00000143 R		PUSH	OFFSET prompt1			; [EBP+8]
 0000002A  E8 00000043			CALL	ReadVal					; EAX = returned int

 0000002F  89 07			MOV		[EDI], EAX				; int into [EDI]
 00000031  83 C7 04			ADD		EDI, 4					; inc by type size
 00000034  E2 E3			LOOP	_fillLoop

				; TODO: Display the integers
 00000036  68 0000022F R		PUSH	OFFSET digit_array2		; [EBP+12]
 0000003B  68 0000022B R		PUSH	OFFSET digit_array		; [EBP+8]
 00000040  E8 000000DA			CALL	WriteVal

				; TODO: Display the sum of the integers

				; TODO: Display the truncated average of the integers

				; Display goodbye message
 00000045  68 0000020B R		PUSH	OFFSET goodbye_string
 0000004A  E8 000001CC			CALL	goodbye

					Invoke ExitProcess,0			; exit to operating system
 0000004F  6A 00	   *	    push   +000000000h
 00000051  E8 00000000 E   *	    call   ExitProcess
 00000056			main ENDP

				; ---------------------------------------------------------------------
				; Name: introduction
				;
				; Introduces the user to the program and displays the title, programmer's name
				;	and description
				;
				; Preconditions: intro1 and intro2 exist and have been pushed onto stack
				;
				; Postconditions: EDX changed
				;
				; Recieves: intro1 and intro2 strings
				; --------------------------------------------------------------------
 00000056			introduction PROC
 00000056  55				PUSH	EBP						; Step 1) Preserve EBP
 00000057  8B EC			MOV		EBP, ESP				; Step 2) Assign static stack-frame pointer
 00000059  8B 55 0C			MOV     EDX, [EBP+12]   
 0000005C  E8 00000000 E		CALL    WriteString				; print intro1
 00000061  8B 55 08			MOV     EDX, [EBP+8]   
 00000064  E8 00000000 E		CALL    WriteString				; print intro2
 00000069  E8 00000000 E		CALL	CrLf
					
 0000006E  5D				POP		EBP
 0000006F  C2 0008			RET		8
 00000072			introduction ENDP
				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Invokes the mGetString macro to get user input, converts the string of ascii 
				;	digit to its numeric value representation, and stores this one value in a 
				;	EAX. 
				;
				; Preconditions: the array contains a string of ascii digits, mGetString macro works
				;
				; Postconditions: EAX, EBX, EDX changed
				;
				; Receives:
				;	 - SIZEOF num_string
				;	 - address of num_string
				;	 - address of error_mess
				;	 - address of prompt1
				;
				; returns: an integer in EAX
				; ---------------------------------------------------------------------------------
 00000072			ReadVal PROC
					LOCAL s_len:DWORD, num_char:BYTE, num_int:SDWORD, sign:BYTE
 00000072  55		   *	    push   ebp
 00000073  8B EC	   *	    mov    ebp, esp
 00000075  83 C4 F0	   *	    add    esp, 0FFFFFFF0h
 00000078  51				PUSH	ECX
 00000079  C7 45 F4			MOV		num_int, 0				;  num_int = 0
	   00000000

 00000080			_getNewString:
				; Read the user's input as a string and convert the string to numeric form.
				;  get num_string (uset input of ascii chars)	
					mGetString [EBP+8], s_len, [EBP+16], [EBP+20]		
 00000080  52		     1		PUSH	EDX
 00000081  8B 55 08	     1		MOV		EDX, [EBP+8]
 00000084  E8 00000000 E     1		CALL	WriteString
 00000089  8B 55 10	     1		MOV		EDX, [EBP+16]			; EDX = address of num_string (buffer)
 0000008C  8B 4D 14	     1		MOV		ECX, [EBP+20]			; ECX = num_string (buffer) size
 0000008F  E8 00000000 E     1		CALL	ReadString					; returns:
 00000094  89 45 FC	     1		MOV		s_len, EAX				;	EAX = number of characters entered
 00000097  5A		     1		POP		EDX
 00000098  E8 00000000 E		CALL	CrLf
 0000009D  C6 45 F3 00			MOV		sign, 0					; sign = 0 (default; positive integer)

 000000A1  FC				CLD								; sets direction flag (forward)
 000000A2  BB 0000000A			MOV		EBX, 10
 000000A7  8B 4D FC			MOV		ECX, s_len
 000000AA  8B 75 10			MOV		ESI, [EBP+16]			; address of num_string

 000000AD  8A 06			MOV		AL, [ESI]
				; if first character != 45(-), skip to check for +
 000000AF  3C 2D			CMP		AL, 45
 000000B1  75 06			JNE		_checkPlus
 000000B3  FE 45 F3			INC		sign					; sign = 1 (negative integer)
 000000B6  AC				LODSB
 000000B7  EB 2C			JMP		_loopAgain
				; if first character != 43(+), skip to loop
 000000B9			_checkPlus:
 000000B9  3C 2B			CMP		AL, 43
 000000BB  75 03			JNE		_convert 

 000000BD  AC				LODSB
 000000BE  EB 25			JMP		_loopAgain

 000000C0			_convert:
 000000C0  AC				LODSB							;  for num_char in num_string:
 000000C1  88 45 FB			MOV		num_char, AL
 000000C4  80 7D FB 30			CMP		num_char, 48
 000000C8  7C 1F			JL		_error
 000000CA  80 7D FB 39			CMP		num_char, 57
 000000CE  7F 19			JG		_error					;    if 48 <= num_char <= 57:
 000000D0  8B 45 F4			MOV		EAX, num_int			;      num_int = 10 * num_int + (num_char - 48)
 000000D3  F7 EB			IMUL	EBX						;		(10 * num_int)
 000000D5  0F B6 55 FB			MOVZX	EDX, num_char
 000000D9  70 0E			JO		_error
 000000DB  03 C2			ADD		EAX, EDX
 000000DD  70 0A			JO		_error

 000000DF			_notTooBig:
 000000DF  83 E8 30			SUB		EAX, 48					; EAX = integer converted from string
 000000E2  89 45 F4			MOV		num_int, EAX

 000000E5			_loopAgain:
 000000E5  E2 D9		  LOOP	_convert
 000000E7  EB 11			JMP		_checkSign
													
 000000E9			_error:								;    else:
 000000E9  8B 55 0C			MOV		EDX, [EBP+12]			;		print error message
 000000EC  E8 00000000 E		CALL	WriteString
 000000F1  C7 45 F4			MOV		num_int, 0				;		num_int = 0
	   00000000
 000000F8  EB 86			JMP		_getNewString			;		get another num_string

				; check sign: if negative, subtract from zero
 000000FA			_checkSign:
 000000FA  80 7D F3 01			CMP		sign, 1
 000000FE  74 02			JZ		_negInt
 00000100  EB 0B			JMP		_out
 00000102			_negInt:
 00000102  B8 00000000			MOV		EAX, 0
 00000107  2B 45 F4			SUB		EAX, num_int
 0000010A  89 45 F4			MOV		num_int, EAX

				; Store this one value in a memory variable (output parameter, by reference). 
 0000010D			_out:	
 0000010D  8B 45 F4			MOV		EAX, num_int
						
 00000110  E8 00000000 E		CALL	WriteInt				; TEST: prints integer after user input
 00000115  E8 00000000 E		CALL	CrLf					; TEST: delete this line later

 0000011A  59				POP		ECX
 0000011B  C9		   *	    leave  
 0000011C  C2 0010			RET		16
 0000011F			ReadVal	ENDP

				; ---------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; Converts a numeric SDWORD value to a string of ASCII digits and invokes the 
				; mDisplayString macro to print the ASCII representation of the value to the output.
				;
				; Preconditions: EAX contains an integer
				;
				; Postconditions: EBX, ECX, EDX changed
				;
				; Receives: EAX = the integer to be printed
				;
				; returns: none
				; ---------------------------------------------------------------------------------
 0000011F			WriteVal PROC
				; Convert a numeric SDWORD value (input parameter, by value) to a string of ASCII digits.
					LOCAL sign:BYTE, len:DWORD
 0000011F  55		   *	    push   ebp
 00000120  8B EC	   *	    mov    ebp, esp
 00000122  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 00000125  50				PUSH	EAX
 00000126  57				PUSH	EDI
 00000127  56				PUSH	ESI
 00000128  C6 45 FF 00			MOV		sign, 0				; sing = 0, will indicates sign of integer in EAX, default positive
 0000012C  8B 75 08			MOV		ESI, [EBP+8]		; move digit_array into ESI

				; is the integer positive?
 0000012F  83 F8 00			CMP		EAX, 0				
												
 00000132  7C 02			JL		_negative
 00000134  EB 06			JMP		_howBig

				; if not, negate and change sign to 1
 00000136			_negative:
 00000136  F7 D8			NEG		EAX					
 00000138  C6 45 FF 01			MOV		sign, 1

 0000013C			_howBig:
				; how large is the integer?
				; if > 1000000000
 0000013C  3D 3B9ACA00			CMP		EAX, 1000000000
 00000141  7D 3D			JGE		_len10
				;	 >= 100000000
 00000143  3D 05F5E100			CMP		EAX, 100000000
 00000148  7D 3F			JGE		_len9
				;	 >= 10000000
 0000014A  3D 00989680			CMP		EAX, 10000000
 0000014F  7D 41			JGE		_len8
				;	 >= 1000000
 00000151  3D 000F4240			CMP		EAX, 1000000
 00000156  7D 43			JGE		_len7
				;	 >= 100000
 00000158  3D 000186A0			CMP		EAX, 100000
 0000015D  7D 45			JGE		_len6
				;	 >= 10000
 0000015F  3D 00002710			CMP		EAX, 10000
 00000164  7D 47			JGE		_len5
				;	 >= 1000
 00000166  3D 000003E8			CMP		EAX, 1000
 0000016B  7D 49			JGE		_len4
				;	 >= 100
 0000016D  83 F8 64			CMP		EAX, 100
 00000170  7D 4D			JGE		_len3
				;	 >= 10
 00000172  83 F8 0A			CMP		EAX, 10
 00000175  7D 51			JGE		_len2
				; else:
 00000177  C7 45 F8			MOV		len, 1
	   00000001
 0000017E  EB 4F			JMP		_initCounter
 00000180			_len10:
 00000180  C7 45 F8			MOV		len, 10
	   0000000A
 00000187  EB 46			JMP		_initCounter
 00000189			_len9:
 00000189  C7 45 F8			MOV		len, 9
	   00000009
 00000190  EB 3D			JMP		_initCounter
 00000192			_len8:
 00000192  C7 45 F8			MOV		len, 8
	   00000008
 00000199  EB 34			JMP		_initCounter
 0000019B			_len7:
 0000019B  C7 45 F8			MOV		len, 7
	   00000007
 000001A2  EB 2B			JMP		_initCounter
 000001A4			_len6:
 000001A4  C7 45 F8			MOV		len, 6
	   00000006
 000001AB  EB 22			JMP		_initCounter
 000001AD			_len5:
 000001AD  C7 45 F8			MOV		len, 5
	   00000005
 000001B4  EB 19			JMP		_initCounter
 000001B6			_len4:
 000001B6  C7 45 F8			MOV		len, 4
	   00000004
 000001BD  EB 10			JMP		_initCounter
 000001BF			_len3:
 000001BF  C7 45 F8			MOV		len, 3
	   00000003
 000001C6  EB 07			JMP		_initCounter
 000001C8			_len2:
 000001C8  C7 45 F8			MOV		len, 2
	   00000002

 000001CF			_initCounter:
 000001CF  8B 4D F8			MOV		ECX, len

 000001D2			_fillArrayLoop:
				; divide integer by 10
 000001D2  BB 0000000A			MOV		EBX, 10					; divisor
 000001D7  BA 00000000			MOV		EDX, 0
 000001DC  F7 FB			IDIV	EBX	
				; add 48 to remainder
 000001DE  83 C2 30			ADD		EDX, 48
 000001E1  89 16			MOV		[ESI], EDX				; int into [ESI]
 000001E3  83 C6 01			ADD		ESI, 1					; inc by type size

 000001E6  E2 EA		  LOOP	_fillArrayLoop

 000001E8  8B 4D F8			MOV		ECX, len
 000001EB  8B 75 08			MOV		ESI, [EBP+8]
 000001EE  03 F1			ADD		ESI, ECX
 000001F0  4E				DEC		ESI
 000001F1  8B 7D 0C			MOV		EDI, [EBP+12]		; move digit_array2 into EDI

				; Reverse string
 000001F4			_revLoop:
 000001F4  FD			    STD
 000001F5  AC			    LODSB
 000001F6  FC			    CLD
 000001F7  AA			    STOSB
 000001F8  E2 FA		   LOOP   _revLoop

				; Invoke the mDisplayString macro to print the ASCII representation of the SDWORD value 
				;	to the output.
					mDisplayString [EBP+12]
 000001FA  80 7D FF 00	     1		CMP		sign, 0
 000001FE  74 07	     1		JZ		_write
 00000200  B0 2D	     1		MOV		AL, 45
 00000202  E8 00000000 E     1		CALL	WriteChar
 00000207		     1	_write:
 00000207  8B 55 0C	     1		MOV		EDX, [EBP+12]
 0000020A  E8 00000000 E     1		CALL	WriteString
 0000020F  E8 00000000 E		CALL	CrLf
 00000214  5E				POP		ESI
 00000215  5F				POP		EDI
 00000216  58				POP		EAX
 00000217  C9		   *	    leave  
 00000218  C2 000C			RET		12
 0000021B			WriteVal ENDP

				; ---------------------------------------------------------------------
				; Name: goodbye
				;
				; Displays farewell message
				;
				; Preconditions: goodbye_string exists and has been pushed onto stack
				;
				; Postconditions: EDX changed
				;
				; receives: goodbye_string = string
				; --------------------------------------------------------------------
 0000021B			goodbye PROC
 0000021B  55				PUSH	EBP						; Step 1) Preserve EBP
 0000021C  8B EC			MOV		EBP, ESP				; Step 2) Assign static stack-frame pointer

 0000021E  8B 55 08			MOV     EDX, [EBP+8]   
 00000221  E8 00000000 E		CALL    WriteString				; print goodbye_string
 00000226  E8 00000000 E		CALL	CrLf
					
 0000022B  5D				POP		EBP
 0000022C  C2 0008			RET		8
 0000022F			goodbye ENDP
				END main
Microsoft (R) Macro Assembler Version 14.29.30142.1	    06/04/22 21:03:56
<Project 6: Low-Level I/O Procedures & Macros     (Proj6_ALL  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000243 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000022F Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000072 _TEXT	Length= 000000AD Public STDCALL
  s_len  . . . . . . . . . . . .	DWord	 bp - 00000004
  num_char . . . . . . . . . . .	Byte	 bp - 00000005
  num_int  . . . . . . . . . . .	DWord	 bp - 0000000C
  sign . . . . . . . . . . . . .	Byte	 bp - 0000000D
  _getNewString  . . . . . . . .	L Near	 00000080 _TEXT	
  _checkPlus . . . . . . . . . .	L Near	 000000B9 _TEXT	
  _convert . . . . . . . . . . .	L Near	 000000C0 _TEXT	
  _notTooBig . . . . . . . . . .	L Near	 000000DF _TEXT	
  _loopAgain . . . . . . . . . .	L Near	 000000E5 _TEXT	
  _error . . . . . . . . . . . .	L Near	 000000E9 _TEXT	
  _checkSign . . . . . . . . . .	L Near	 000000FA _TEXT	
  _negInt  . . . . . . . . . . .	L Near	 00000102 _TEXT	
  _out . . . . . . . . . . . . .	L Near	 0000010D _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000011F _TEXT	Length= 000000FC Public STDCALL
  sign . . . . . . . . . . . . .	Byte	 bp - 00000001
  len  . . . . . . . . . . . . .	DWord	 bp - 00000008
  _negative  . . . . . . . . . .	L Near	 00000136 _TEXT	
  _howBig  . . . . . . . . . . .	L Near	 0000013C _TEXT	
  _len10 . . . . . . . . . . . .	L Near	 00000180 _TEXT	
  _len9  . . . . . . . . . . . .	L Near	 00000189 _TEXT	
  _len8  . . . . . . . . . . . .	L Near	 00000192 _TEXT	
  _len7  . . . . . . . . . . . .	L Near	 0000019B _TEXT	
  _len6  . . . . . . . . . . . .	L Near	 000001A4 _TEXT	
  _len5  . . . . . . . . . . . .	L Near	 000001AD _TEXT	
  _len4  . . . . . . . . . . . .	L Near	 000001B6 _TEXT	
  _len3  . . . . . . . . . . . .	L Near	 000001BF _TEXT	
  _len2  . . . . . . . . . . . .	L Near	 000001C8 _TEXT	
  _initCounter . . . . . . . . .	L Near	 000001CF _TEXT	
  _fillArrayLoop . . . . . . . .	L Near	 000001D2 _TEXT	
  _revLoop . . . . . . . . . . .	L Near	 000001F4 _TEXT	
  _write . . . . . . . . . . . .	L Near	 00000207 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
goodbye  . . . . . . . . . . . .	P Near	 0000021B _TEXT	Length= 00000014 Public STDCALL
introduction . . . . . . . . . .	P Near	 00000056 _TEXT	Length= 0000001C Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000056 Public STDCALL
  _fillLoop  . . . . . . . . . .	L Near	 00000019 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 00000004h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
average_string . . . . . . . . .	Byte	 000001EE _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
digit_array2 . . . . . . . . . .	Byte	 0000022F _DATA	
digit_array  . . . . . . . . . .	Byte	 0000022B _DATA	
display_string . . . . . . . . .	Byte	 000001A9 _DATA	
error_mess . . . . . . . . . . .	Byte	 00000162 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye_string . . . . . . . . .	Byte	 0000020B _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
int_array  . . . . . . . . . . .	DWord	 00000233 _DATA	
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 00000057 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
num_string . . . . . . . . . . .	Byte	 00000216 _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000143 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sum_string . . . . . . . . . . .	Byte	 000001CE _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
